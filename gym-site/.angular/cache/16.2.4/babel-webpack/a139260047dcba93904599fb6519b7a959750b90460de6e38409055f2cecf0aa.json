{"ast":null,"code":"var _class;\nimport { environment } from 'src/Environments/myEnvironments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/Service/cart/cart.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nfunction ShoppingCartComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Your shopping cart is empty.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ShoppingCartComponent_ng_template_1_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6, \"1\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(7, \" You may implement quantity tracking in your service \");\n    i0.ɵɵelementStart(8, \"td\")(9, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ShoppingCartComponent_ng_template_1_tr_12_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const item_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.removeFromCart(item_r4.id));\n    });\n    i0.ɵɵtext(10, \"Remove\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r4.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r4.price);\n  }\n}\nfunction ShoppingCartComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Product Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Price\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Quantity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, ShoppingCartComponent_ng_template_1_tr_12_Template, 11, 2, \"tr\", 2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ShoppingCartComponent_ng_template_1_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.clearCart());\n    });\n    i0.ɵɵtext(14, \"Clear Cart\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 4);\n    i0.ɵɵtext(16, \"Proceed to Checkout\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(17, \" Link to your checkout page \");\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.cartItems);\n  }\n}\nexport class ShoppingCartComponent {\n  constructor(cartService, http) {\n    this.cartService = cartService;\n    this.http = http;\n    this.cartItems = [];\n    this.baseApiUrl = environment.baseApiUrl; //get Url Api\n  }\n\n  ngOnInit() {\n    // Subscribe to the cart service to get cart items\n    this.cartService.getCartItems().subscribe(items => {\n      this.cartItems = items;\n    });\n  }\n  removeFromCart(productId) {\n    // Call the cart service to remove an item from the cart\n    this.cartService.removeFromCart(productId);\n  }\n  clearCart() {\n    // Call the cart service to clear the cart\n    this.cartService.clearCart();\n  }\n  createOrder() {\n    const orderData = {\n      userId: 'user123',\n      cartItems: this.cartItems\n    };\n    const orderApiUrl = this.baseApiUrl + '/create-order';\n    this.http.post(orderApiUrl, orderData).subscribe(response => {\n      // Assuming your API returns an array of updated cart items, change 'any[]' to the actual response type\n      this.cartService.updateCartInToken(response); // Update the token with the response\n      this.cartService.clearCart(); // Clear the cart\n    }, error => {\n      console.error('Failed to create the order:', error);\n    });\n  }\n}\n_class = ShoppingCartComponent;\n_class.ɵfac = function ShoppingCartComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.CartService), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-shopping-cart\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[4, \"ngIf\", \"ngIfElse\"], [\"cartContents\", \"\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [\"routerLink\", \"/checkout\"]],\n  template: function ShoppingCartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ShoppingCartComponent_div_0_Template, 3, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, ShoppingCartComponent_ng_template_1_Template, 18, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.cartItems.length === 0)(\"ngIfElse\", _r1);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.RouterLink],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["environment","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","ShoppingCartComponent_ng_template_1_tr_12_Template_button_click_9_listener","restoredCtx","ɵɵrestoreView","_r6","item_r4","$implicit","ctx_r5","ɵɵnextContext","ɵɵresetView","removeFromCart","id","ɵɵadvance","ɵɵtextInterpolate","name","price","ɵɵtemplate","ShoppingCartComponent_ng_template_1_tr_12_Template","ShoppingCartComponent_ng_template_1_Template_button_click_13_listener","_r8","ctx_r7","clearCart","ɵɵproperty","ctx_r2","cartItems","ShoppingCartComponent","constructor","cartService","http","baseApiUrl","ngOnInit","getCartItems","subscribe","items","productId","createOrder","orderData","userId","orderApiUrl","post","response","updateCartInToken","error","console","ɵɵdirectiveInject","i1","CartService","i2","HttpClient","selectors","decls","vars","consts","template","ShoppingCartComponent_Template","rf","ctx","ShoppingCartComponent_div_0_Template","ShoppingCartComponent_ng_template_1_Template","ɵɵtemplateRefExtractor","length","_r1"],"sources":["C:\\angular\\gym-site\\src\\component\\cart\\shopping-cart\\shopping-cart.component.ts","C:\\angular\\gym-site\\src\\component\\cart\\shopping-cart\\shopping-cart.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CartService } from 'src/Service/cart/cart.service' // Import your ShoppingCartService\nimport { product } from 'src/models/product.model'; // Import your product model\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/Environments/myEnvironments'\n\n@Component({\n  selector: 'app-shopping-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.scss']\n})\nexport class ShoppingCartComponent implements OnInit {\n  cartItems: product[] = [];\n  baseApiUrl: string = environment.baseApiUrl;//get Url Api\n\n  constructor(private cartService: CartService, private http: HttpClient) { }\n\n  ngOnInit(): void {\n    // Subscribe to the cart service to get cart items\n    this.cartService.getCartItems().subscribe(items => {\n      this.cartItems = items;\n    });\n  }\n\n  removeFromCart(productId: string): void {\n    // Call the cart service to remove an item from the cart\n    this.cartService.removeFromCart(productId);\n  }\n\n  clearCart(): void {\n    // Call the cart service to clear the cart\n    this.cartService.clearCart();\n  }\n\n\n  createOrder(): void {\n    const orderData = {\n      userId: 'user123',\n      cartItems: this.cartItems,\n    };\n\n    const orderApiUrl = this.baseApiUrl + '/create-order';\n\n    this.http.post<any[]>(orderApiUrl, orderData).subscribe(\n      (response: any[]) => {\n        // Assuming your API returns an array of updated cart items, change 'any[]' to the actual response type\n        this.cartService.updateCartInToken(response); // Update the token with the response\n        this.cartService.clearCart(); // Clear the cart\n      },\n      (error) => {\n        console.error('Failed to create the order:', error);\n      }\n    );\n  }\n}\n","<div *ngIf=\"cartItems.length === 0; else cartContents\">\r\n  <p>Your shopping cart is empty.</p>\r\n</div>\r\n\r\n<ng-template #cartContents>\r\n  <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Product Name</th>\r\n        <th>Price</th>\r\n        <th>Quantity</th>\r\n        <th>Actions</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let item of cartItems\">\r\n        <td>{{ item.name }}</td>\r\n        <td>{{ item.price }}</td>\r\n        <td>1</td>  You may implement quantity tracking in your service \r\n        <td>\r\n          <button (click)=\"removeFromCart(item.id)\">Remove</button>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <button (click)=\"clearCart()\">Clear Cart</button>\r\n  <button routerLink=\"/checkout\">Proceed to Checkout</button>  Link to your checkout page \r\n</ng-template>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}