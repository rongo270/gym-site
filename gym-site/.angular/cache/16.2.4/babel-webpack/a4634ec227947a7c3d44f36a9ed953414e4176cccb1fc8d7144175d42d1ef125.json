{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/Environments/myEnvironments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport let UsersService = /*#__PURE__*/(() => {\n  var _class;\n  class UsersService {\n    constructor(http, jwtHelper) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n      this.LogStatus = false; //diffult\n      this.baseApiUrl = environment.baseApiUrl; //get Url Api\n    }\n\n    get token() {\n      return localStorage.getItem('jwt');\n    }\n    PostLogin(credentials) {\n      return this.http.post(this.baseApiUrl + \"/api/Users/Login\", credentials, {\n        responseType: 'json'\n      });\n    }\n    GetEmail() {\n      const token = localStorage.getItem('jwt');\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n      const options = {\n        headers: new HttpHeaders(headers) // Use HttpHeaders object to set headers\n      };\n\n      return this.http.get(this.baseApiUrl + \"/api/Users/GetEmail\", options);\n    }\n    LogOut() {\n      localStorage.removeItem('jwt'); // Remove the JWT token from storage\n      this.LogStatus = false; // Update the LoggedIn flag\n    }\n\n    IsUserAuthenticated() {\n      const token = localStorage.getItem('jwt'); //store the token found\n      if (token && !this.jwtHelper.isTokenExpired(token)) {\n        //if token !=null and not expired\n        this.LogStatus = true; //log is true\n        return this.LogStatus; //true\n      }\n\n      this.LogStatus = false; //log is false\n      return this.LogStatus; //false\n    }\n\n    addUser(addUserRequest) {\n      return this.http.post(this.baseApiUrl + '/api/Users', addUserRequest);\n    }\n    getall() {\n      const token = localStorage.getItem('jwt');\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n      const options = {\n        headers: new HttpHeaders(headers) // Use HttpHeaders object to set headers\n      };\n\n      return this.http.get(this.baseApiUrl + \"/api/Users/GetAll\", options);\n    }\n  }\n  _class = UsersService;\n  _class.ɵfac = function UsersService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return UsersService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}