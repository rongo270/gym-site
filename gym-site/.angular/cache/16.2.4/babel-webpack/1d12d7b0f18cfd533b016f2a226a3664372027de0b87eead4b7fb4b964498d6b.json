{"ast":null,"code":"var _class;\nimport { environment } from 'src/Environments/myEnvironments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/Service/cart/cart.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class ShoppingCartComponent {\n  constructor(cartService, http) {\n    this.cartService = cartService;\n    this.http = http;\n    this.cartItems = [];\n    this.baseApiUrl = environment.baseApiUrl; //get Url Api\n  }\n\n  ngOnInit() {\n    // Subscribe to the cart service to get cart items\n    this.cartService.getCartItems().subscribe(items => {\n      this.cartItems = items;\n    });\n  }\n  removeFromCart(productId) {\n    // Call the cart service to remove an item from the cart\n    this.cartService.removeFromCart(productId);\n  }\n  clearCart() {\n    // Call the cart service to clear the cart\n    this.cartService.clearCart();\n  }\n  createOrder() {\n    const orderData = {\n      userId: 'user123',\n      cartItems: this.cartItems\n    };\n    const orderApiUrl = this.baseApiUrl + '/create-order';\n    this.http.post(orderApiUrl, orderData).subscribe(response => {\n      // Assuming your API returns an array of updated cart items, change 'any[]' to the actual response type\n      this.cartService.updateCartInToken(response); // Update the token with the response\n      this.cartService.clearCart(); // Clear the cart\n    }, error => {\n      console.error('Failed to create the order:', error);\n    });\n  }\n}\n_class = ShoppingCartComponent;\n_class.ɵfac = function ShoppingCartComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.CartService), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-shopping-cart\"]],\n  decls: 0,\n  vars: 0,\n  template: function ShoppingCartComponent_Template(rf, ctx) {},\n  styles: [\"\\n (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n\\n \\t\\\"use strict\\\";\\n\\n \\t\\n\\n \\t\\n\\n })()[_ngcontent-%COMP%]\\n;\"]\n});","map":{"version":3,"names":["environment","ShoppingCartComponent","constructor","cartService","http","cartItems","baseApiUrl","ngOnInit","getCartItems","subscribe","items","removeFromCart","productId","clearCart","createOrder","orderData","userId","orderApiUrl","post","response","updateCartInToken","error","console","i0","ɵɵdirectiveInject","i1","CartService","i2","HttpClient","selectors","decls","vars","template","ShoppingCartComponent_Template","rf","ctx","styles"],"sources":["C:\\angular\\gym-site\\src\\component\\cart\\shopping-cart\\shopping-cart.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { CartService } from 'src/Service/cart/cart.service' // Import your ShoppingCartService\nimport { product } from 'src/models/product.model'; // Import your product model\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/Environments/myEnvironments'\n\n@Component({\n  selector: 'app-shopping-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.css']\n})\nexport class ShoppingCartComponent implements OnInit {\n  cartItems: product[] = [];\n  baseApiUrl: string = environment.baseApiUrl;//get Url Api\n\n  constructor(private cartService: CartService, private http: HttpClient) { }\n\n  ngOnInit(): void {\n    // Subscribe to the cart service to get cart items\n    this.cartService.getCartItems().subscribe(items => {\n      this.cartItems = items;\n    });\n  }\n\n  removeFromCart(productId: string): void {\n    // Call the cart service to remove an item from the cart\n    this.cartService.removeFromCart(productId);\n  }\n\n  clearCart(): void {\n    // Call the cart service to clear the cart\n    this.cartService.clearCart();\n  }\n\n\n  createOrder(): void {\n    const orderData = {\n      userId: 'user123',\n      cartItems: this.cartItems,\n    };\n\n    const orderApiUrl = this.baseApiUrl + '/create-order';\n\n    this.http.post<any[]>(orderApiUrl, orderData).subscribe(\n      (response: any[]) => {\n        // Assuming your API returns an array of updated cart items, change 'any[]' to the actual response type\n        this.cartService.updateCartInToken(response); // Update the token with the response\n        this.cartService.clearCart(); // Clear the cart\n      },\n      (error) => {\n        console.error('Failed to create the order:', error);\n      }\n    );\n  }\n}\n"],"mappings":";AAIA,SAASA,WAAW,QAAQ,iCAAiC;;;;AAO7D,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,WAAwB,EAAUC,IAAgB;IAAlD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAH1D,KAAAC,SAAS,GAAc,EAAE;IACzB,KAAAC,UAAU,GAAWN,WAAW,CAACM,UAAU,CAAC;EAE8B;;EAE1EC,QAAQA,CAAA;IACN;IACA,IAAI,CAACJ,WAAW,CAACK,YAAY,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MAChD,IAAI,CAACL,SAAS,GAAGK,KAAK;IACxB,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAACC,SAAiB;IAC9B;IACA,IAAI,CAACT,WAAW,CAACQ,cAAc,CAACC,SAAS,CAAC;EAC5C;EAEAC,SAASA,CAAA;IACP;IACA,IAAI,CAACV,WAAW,CAACU,SAAS,EAAE;EAC9B;EAGAC,WAAWA,CAAA;IACT,MAAMC,SAAS,GAAG;MAChBC,MAAM,EAAE,SAAS;MACjBX,SAAS,EAAE,IAAI,CAACA;KACjB;IAED,MAAMY,WAAW,GAAG,IAAI,CAACX,UAAU,GAAG,eAAe;IAErD,IAAI,CAACF,IAAI,CAACc,IAAI,CAAQD,WAAW,EAAEF,SAAS,CAAC,CAACN,SAAS,CACpDU,QAAe,IAAI;MAClB;MACA,IAAI,CAAChB,WAAW,CAACiB,iBAAiB,CAACD,QAAQ,CAAC,CAAC,CAAC;MAC9C,IAAI,CAAChB,WAAW,CAACU,SAAS,EAAE,CAAC,CAAC;IAChC,CAAC,EACAQ,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD,CAAC,CACF;EACH;;SA1CWpB,qBAAqB;;mBAArBA,MAAqB,EAAAsB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,UAAA;AAAA;;QAArB3B,MAAqB;EAAA4B,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;EAAAC,MAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}