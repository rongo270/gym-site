{"ast":null,"code":"var _class;\nimport { BehaviorSubject } from 'rxjs';\nimport * as jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cartItems = [];\n    this.cartItemsSubject = new BehaviorSubject([]);\n    // Initialize the cart from local storage if available\n    const storedCart = localStorage.getItem('shoppingCart');\n    if (storedCart) {\n      this.cartItems = JSON.parse(storedCart);\n      this.cartItemsSubject.next(this.cartItems);\n    }\n  }\n  getCartItems() {\n    return this.cartItemsSubject;\n  }\n  addToCart(product) {\n    this.cartItems.push(product);\n    this.cartItemsSubject.next(this.cartItems);\n    this.saveCartToLocalStorage();\n  }\n  removeFromCart(productId) {\n    this.cartItems = this.cartItems.filter(item => item.id !== productId);\n    this.cartItemsSubject.next(this.cartItems);\n    this.saveCartToLocalStorage();\n  }\n  clearCart() {\n    this.cartItems = [];\n    this.cartItemsSubject.next(this.cartItems);\n    this.clearCartFromLocalStorage();\n  }\n  saveCartToLocalStorage() {\n    localStorage.setItem('shoppingCart', JSON.stringify(this.cartItems));\n  }\n  clearCartFromLocalStorage() {\n    localStorage.removeItem('shoppingCart');\n  }\n  updateCartInToken(newCartData) {\n    // Get the existing token\n    const token = localStorage.getItem('jwt_token');\n    const decodedToken = jwt_decode(token);\n    decodedToken.cart = newCartData;\n    localStorage.setItem('jwt_token', JSON.stringify(decodedToken));\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","jwt_decode","CartService","constructor","cartItems","cartItemsSubject","storedCart","localStorage","getItem","JSON","parse","next","getCartItems","addToCart","product","push","saveCartToLocalStorage","removeFromCart","productId","filter","item","id","clearCart","clearCartFromLocalStorage","setItem","stringify","removeItem","updateCartInToken","newCartData","token","decodedToken","cart","factory","ɵfac","providedIn"],"sources":["C:\\angular\\gym-site\\src\\Service\\cart\\cart.service.ts"],"sourcesContent":["// cart.service.ts\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { product } from '../../models/product.model';\nimport * as jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private cartItems: product[] = [];\n  private cartItemsSubject = new BehaviorSubject<product[]>([]);\n\n  constructor() {\n    // Initialize the cart from local storage if available\n    const storedCart = localStorage.getItem('shoppingCart');\n    if (storedCart) {\n      this.cartItems = JSON.parse(storedCart);\n      this.cartItemsSubject.next(this.cartItems);\n    }\n  }\n\n  getCartItems(): BehaviorSubject<product[]> {\n    return this.cartItemsSubject;\n  }\n\n  addToCart(product: product): void {\n    this.cartItems.push(product);\n    this.cartItemsSubject.next(this.cartItems);\n    this.saveCartToLocalStorage();\n  }\n\n  removeFromCart(productId: string): void {\n    this.cartItems = this.cartItems.filter((item) => item.id !== productId);\n    this.cartItemsSubject.next(this.cartItems);\n    this.saveCartToLocalStorage();\n  }\n\n  clearCart(): void {\n    this.cartItems = [];\n    this.cartItemsSubject.next(this.cartItems);\n    this.clearCartFromLocalStorage();\n  }\n\n  private saveCartToLocalStorage(): void {\n    localStorage.setItem('shoppingCart', JSON.stringify(this.cartItems));\n  }\n\n  private clearCartFromLocalStorage(): void {\n    localStorage.removeItem('shoppingCart');\n  }\n\n  updateCartInToken(newCartData: product[]): void {\n    // Get the existing token\n    const token = localStorage.getItem('jwt_token');\n    const decodedToken = jwt_decode<{ key1: string, key2: number }>(token);\n    decodedToken.cart = newCartData;\n    localStorage.setItem('jwt_token', JSON.stringify(decodedToken));\n  }\n}\n"],"mappings":";AAEA,SAASA,eAAe,QAAQ,MAAM;AAEtC,OAAO,KAAKC,UAAU,MAAM,YAAY;;AAKxC,OAAM,MAAOC,WAAW;EAItBC,YAAA;IAHQ,KAAAC,SAAS,GAAc,EAAE;IACzB,KAAAC,gBAAgB,GAAG,IAAIL,eAAe,CAAY,EAAE,CAAC;IAG3D;IACA,MAAMM,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACvD,IAAIF,UAAU,EAAE;MACd,IAAI,CAACF,SAAS,GAAGK,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC;MACvC,IAAI,CAACD,gBAAgB,CAACM,IAAI,CAAC,IAAI,CAACP,SAAS,CAAC;;EAE9C;EAEAQ,YAAYA,CAAA;IACV,OAAO,IAAI,CAACP,gBAAgB;EAC9B;EAEAQ,SAASA,CAACC,OAAgB;IACxB,IAAI,CAACV,SAAS,CAACW,IAAI,CAACD,OAAO,CAAC;IAC5B,IAAI,CAACT,gBAAgB,CAACM,IAAI,CAAC,IAAI,CAACP,SAAS,CAAC;IAC1C,IAAI,CAACY,sBAAsB,EAAE;EAC/B;EAEAC,cAAcA,CAACC,SAAiB;IAC9B,IAAI,CAACd,SAAS,GAAG,IAAI,CAACA,SAAS,CAACe,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKH,SAAS,CAAC;IACvE,IAAI,CAACb,gBAAgB,CAACM,IAAI,CAAC,IAAI,CAACP,SAAS,CAAC;IAC1C,IAAI,CAACY,sBAAsB,EAAE;EAC/B;EAEAM,SAASA,CAAA;IACP,IAAI,CAAClB,SAAS,GAAG,EAAE;IACnB,IAAI,CAACC,gBAAgB,CAACM,IAAI,CAAC,IAAI,CAACP,SAAS,CAAC;IAC1C,IAAI,CAACmB,yBAAyB,EAAE;EAClC;EAEQP,sBAAsBA,CAAA;IAC5BT,YAAY,CAACiB,OAAO,CAAC,cAAc,EAAEf,IAAI,CAACgB,SAAS,CAAC,IAAI,CAACrB,SAAS,CAAC,CAAC;EACtE;EAEQmB,yBAAyBA,CAAA;IAC/BhB,YAAY,CAACmB,UAAU,CAAC,cAAc,CAAC;EACzC;EAEAC,iBAAiBA,CAACC,WAAsB;IACtC;IACA,MAAMC,KAAK,GAAGtB,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMsB,YAAY,GAAG7B,UAAU,CAAiC4B,KAAK,CAAC;IACtEC,YAAY,CAACC,IAAI,GAAGH,WAAW;IAC/BrB,YAAY,CAACiB,OAAO,CAAC,WAAW,EAAEf,IAAI,CAACgB,SAAS,CAACK,YAAY,CAAC,CAAC;EACjE;;SAjDW5B,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAA8B,OAAA,EAAX9B,MAAW,CAAA+B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}