{"ast":null,"code":"var _class;\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/Environments/myEnvironments';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../products/products.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../Users/users.service\";\nimport * as i4 from \"@angular/common/http\";\nexport class CartService {\n  constructor(productsService, router, userService, http) {\n    this.productsService = productsService;\n    this.router = router;\n    this.userService = userService;\n    this.http = http;\n    this.cartItems = [];\n    this.cartItemsSubject = new BehaviorSubject([]);\n    this.baseApiUrl = environment.baseApiUrl;\n    // Initialize the cart from local storage if available\n    const storedCart = localStorage.getItem('shoppingCart');\n    if (storedCart) {\n      this.cartItems = JSON.parse(storedCart);\n      this.cartItemsSubject.next(this.cartItems);\n    }\n  }\n  getCartItems() {\n    return this.cartItemsSubject;\n  }\n  getCartItemsUser(id) {\n    return this.http.get(this.baseApiUrl + \"/api/Cart/\" + id);\n  }\n  addToCartUser(cartItem) {\n    return this.http.post(this.baseApiUrl + '/api/Cart/add-to-cart', cartItem);\n  }\n  addToCart(product) {\n    this.cartItems.push(product);\n    this.cartItemsSubject.next(this.cartItems);\n    this.saveCartToLocalStorage();\n  }\n  //removeFromCart(productId: string): void {\n  //  let itemRemoved = false;\n  //  this.cartItems = this.cartItems.filter((item) => {\n  //    if (!itemRemoved && item.id === productId) {\n  //      itemRemoved = true; // Set the flag to true\n  //      return false; // Remove the first item with the matching id\n  //    }\n  //    return true; // Keep all other items\n  //  });\n  //  this.cartItemsSubject.next(this.cartItems);\n  //  this.saveCartToLocalStorage();\n  //}\n  removeFromCart(productId) {\n    // Calculate the total quantity of the product in the cart\n    const totalQuantity = this.cartItems.reduce((total, item) => {\n      if (item.id === productId) {\n        return total + 1;\n      }\n      return total;\n    }, 0);\n    // Update the availability by the total quantity\n    this.productsService.updateAvailable(productId, totalQuantity).subscribe({\n      next: product => {\n        console.log(product);\n      },\n      error: response => {\n        console.log(response);\n      }\n    });\n    // Remove all instances of the product from the cart\n    this.cartItems = this.cartItems.filter(item => item.id !== productId);\n    this.cartItemsSubject.next(this.cartItems);\n    this.saveCartToLocalStorage();\n  }\n  removeFromCartUser(cartitem) {\n    return this.http.post(this.baseApiUrl + \"/api/Cart/Remove-to-cart/\", cartitem);\n  }\n  ClearCartUser(userId) {\n    return this.http.delete(this.baseApiUrl + \"/api/Cart/\" + userId);\n  }\n  clearCart() {\n    this.cartItems = [];\n    this.cartItemsSubject.next(this.cartItems);\n    this.clearCartFromLocalStorage();\n  }\n  saveCartToLocalStorage() {\n    localStorage.setItem('shoppingCart', JSON.stringify(this.cartItems));\n  }\n  clearCartFromLocalStorage() {\n    localStorage.removeItem('shoppingCart');\n  }\n  updateCartInToken(newCartData) {\n    const token = localStorage.getItem('jwt_token');\n    if (token) {\n      const decodedToken = jwt_decode(token);\n      decodedToken.cart = newCartData;\n      localStorage.setItem('jwt_token', JSON.stringify(decodedToken));\n    } else {}\n  }\n}\n_class = CartService;\n_class.ɵfac = function CartService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ProductsService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UsersService), i0.ɵɵinject(i4.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","environment","jwt_decode","CartService","constructor","productsService","router","userService","http","cartItems","cartItemsSubject","baseApiUrl","storedCart","localStorage","getItem","JSON","parse","next","getCartItems","getCartItemsUser","id","get","addToCartUser","cartItem","post","addToCart","product","push","saveCartToLocalStorage","removeFromCart","productId","totalQuantity","reduce","total","item","updateAvailable","subscribe","console","log","error","response","filter","removeFromCartUser","cartitem","ClearCartUser","userId","delete","clearCart","clearCartFromLocalStorage","setItem","stringify","removeItem","updateCartInToken","newCartData","token","decodedToken","cart","i0","ɵɵinject","i1","ProductsService","i2","Router","i3","UsersService","i4","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular\\gym-site\\src\\Service\\cart\\cart.service.ts"],"sourcesContent":["// cart.service.ts\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { product } from '../../models/product.model';\r\nimport { environment } from 'src/Environments/myEnvironments'\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { ProductsService } from '../products/products.service';\r\nimport { Router } from '@angular/router';\r\nimport { UsersService } from '../Users/users.service';\r\nimport { CartItem } from '../../models/CartItem.model';\r\n\r\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartService {\n  private cartItems: product[] = [];\n  private cartItemsSubject = new BehaviorSubject<product[]>([]);\n  baseApiUrl: string = environment.baseApiUrl\n  constructor(private productsService: ProductsService,\n    private router: Router,\n    private userService: UsersService,\n    private http: HttpClient\n  ) {\n    // Initialize the cart from local storage if available\n    const storedCart = localStorage.getItem('shoppingCart');\n    if (storedCart) {\n      this.cartItems = JSON.parse(storedCart);\n      this.cartItemsSubject.next(this.cartItems);\n    }\n  }\n\n  getCartItems(): BehaviorSubject<product[]> {\n    return this.cartItemsSubject;\n  }\n\n  getCartItemsUser(id: string): Observable<CartItem[]> {\r\n    return this.http.get<CartItem[]>(this.baseApiUrl + \"/api/Cart/\" + id);\r\n  }\n\n  addToCartUser(cartItem: CartItem): Observable<string> {\n    return this.http.post<string>(this.baseApiUrl + '/api/Cart/add-to-cart', cartItem);\r\n  }\n\n\n  addToCart(product: product): void {\n      this.cartItems.push(product);\n      this.cartItemsSubject.next(this.cartItems);\n      this.saveCartToLocalStorage();\n  }\n\n  //removeFromCart(productId: string): void {\r\n  //  let itemRemoved = false;\r\n\r\n  //  this.cartItems = this.cartItems.filter((item) => {\r\n  //    if (!itemRemoved && item.id === productId) {\r\n  //      itemRemoved = true; // Set the flag to true\r\n  //      return false; // Remove the first item with the matching id\r\n  //    }\r\n  //    return true; // Keep all other items\r\n  //  });\r\n  //  this.cartItemsSubject.next(this.cartItems);\r\n  //  this.saveCartToLocalStorage();\r\n  //}\r\n  removeFromCart(productId: string): void {\r\n    // Calculate the total quantity of the product in the cart\r\n    const totalQuantity = this.cartItems.reduce((total, item) => {\r\n      if (item.id === productId) {\r\n        return total + 1;\r\n      }\r\n      return total;\r\n    }, 0);\r\n\r\n    // Update the availability by the total quantity\r\n    this.productsService.updateAvailable(productId, totalQuantity).subscribe({\r\n      next: (product) => {\r\n        console.log(product);\r\n      },\r\n      error: (response) => {\r\n        console.log(response);\r\n      }\r\n    });\r\n\r\n    // Remove all instances of the product from the cart\r\n    this.cartItems = this.cartItems.filter((item) => item.id !== productId);\r\n    this.cartItemsSubject.next(this.cartItems);\r\n    this.saveCartToLocalStorage();\r\n  }\r\n\r\n  removeFromCartUser(cartitem: CartItem): Observable<string> {\n    return this.http.post<string>(this.baseApiUrl + \"/api/Cart/Remove-to-cart/\", cartitem);\r\n  }\n\n\n  ClearCartUser(userId: string): Observable<string>{\n    return this.http.delete<string>(this.baseApiUrl + \"/api/Cart/\" + userId);\r\n  }\n\n  clearCart(): void {\n    this.cartItems = [];\n    this.cartItemsSubject.next(this.cartItems);\n    this.clearCartFromLocalStorage();\n  }\n\n  private saveCartToLocalStorage(): void {\n    localStorage.setItem('shoppingCart', JSON.stringify(this.cartItems));\n  }\n\n  private clearCartFromLocalStorage(): void {\n    localStorage.removeItem('shoppingCart');\n  }\n\n  updateCartInToken(newCartData: product[]): void {\r\n    const token = localStorage.getItem('jwt_token');\r\n    if (token) {\r\n      const decodedToken: any = jwt_decode(token);\r\n      decodedToken.cart = newCartData;\r\n      localStorage.setItem('jwt_token', JSON.stringify(decodedToken));\r\n    } else {\r\n    }\r\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}