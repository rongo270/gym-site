{"ast":null,"code":"import { environment } from 'src/Environments/myEnvironments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/Service/cart/cart.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nfunction ShoppingCartComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Your shopping cart is empty.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ShoppingCartComponent_ng_template_1_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6, \"1\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ShoppingCartComponent_ng_template_1_tr_12_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const item_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.removeFromCart(item_r4.id));\n    });\n    i0.ɵɵtext(9, \"Remove\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r4.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(item_r4.price);\n  }\n}\nfunction ShoppingCartComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"table\")(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Product Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"Price\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Quantity\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Actions\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, ShoppingCartComponent_ng_template_1_tr_12_Template, 10, 2, \"tr\", 2);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ShoppingCartComponent_ng_template_1_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.clearCart());\n    });\n    i0.ɵɵtext(14, \"Clear Cart\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 4);\n    i0.ɵɵtext(16, \"Proceed to Checkout\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.cartItems);\n  }\n}\nexport let ShoppingCartComponent = /*#__PURE__*/(() => {\n  var _class;\n  class ShoppingCartComponent {\n    constructor(cartService, http) {\n      this.cartService = cartService;\n      this.http = http;\n      this.cartItems = [];\n      this.baseApiUrl = environment.baseApiUrl; //get Url Api\n    }\n\n    ngOnInit() {\n      // Subscribe to the cart service to get cart items\n      this.cartService.getCartItems().subscribe(items => {\n        this.cartItems = items;\n      });\n    }\n    removeFromCart(productId) {\n      // Call the cart service to remove an item from the cart\n      this.cartService.removeFromCart(productId);\n    }\n    clearCart() {\n      // Call the cart service to clear the cart\n      this.cartService.clearCart();\n    }\n    createOrder() {\n      const orderData = {\n        userId: 'user123',\n        cartItems: this.cartItems\n      };\n      const orderApiUrl = this.baseApiUrl + '/create-order';\n      this.http.post(orderApiUrl, orderData).subscribe(response => {\n        // Assuming your API returns an array of updated cart items, change 'any[]' to the actual response type\n        this.cartService.updateCartInToken(response); // Update the token with the response\n        this.cartService.clearCart(); // Clear the cart\n      }, error => {\n        console.error('Failed to create the order:', error);\n      });\n    }\n  }\n  _class = ShoppingCartComponent;\n  _class.ɵfac = function ShoppingCartComponent_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i1.CartService), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n  _class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _class,\n    selectors: [[\"app-shopping-cart\"]],\n    decls: 3,\n    vars: 2,\n    consts: [[4, \"ngIf\", \"ngIfElse\"], [\"cartContents\", \"\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [\"routerLink\", \"/checkout\"]],\n    template: function ShoppingCartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ShoppingCartComponent_div_0_Template, 3, 0, \"div\", 0);\n        i0.ɵɵtemplate(1, ShoppingCartComponent_ng_template_1_Template, 17, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.cartItems.length === 0)(\"ngIfElse\", _r1);\n      }\n    },\n    dependencies: [i3.NgForOf, i3.NgIf, i4.RouterLink],\n    styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  {// webpackBootstrap \\\"use strict\\\";})()[_ngcontent-%COMP%] ;{%BLOCK%}\"]\n  });\n  return ShoppingCartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}