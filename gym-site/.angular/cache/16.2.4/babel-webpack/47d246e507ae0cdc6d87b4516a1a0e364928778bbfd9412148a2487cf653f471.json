{"ast":null,"code":"var _class;\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from 'src/Environments/myEnvironments';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  //baseApiUrl: string = 'https://localhost:7122';\n  constructor(http) {\n    this.http = http;\n    this.baseApiUrl = environment.baseApiUrl;\n  }\n  // Gets header and adds the token\n  getHeadersNoType() {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + localStorage.getItem('jwt')\n    });\n    return headers;\n  }\n  DefaultHeader() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    });\n    return headers;\n  }\n  GetImage(id) {\n    const headers = this.DefaultHeader();\n    return this.http.get(environment.baseApiUrl + '/api/Products/image/' + id, {\n      headers,\n      responseType: 'blob'\n    });\n  }\n  getAllProducts() {\n    return this.http.get(this.baseApiUrl + '/api/products');\n  }\n  addProduct(addProductRequest) {\n    return this.http.post(this.baseApiUrl + '/api/products', addProductRequest);\n  }\n  getProduct(id) {\n    return this.http.get(this.baseApiUrl + '/api/products/' + id);\n  }\n  updateProduct(id, updateProductRequest) {\n    return this.http.put(this.baseApiUrl + '/api/products/' + id, updateProductRequest);\n  }\n  deleteProduct(id) {\n    return this.http.delete(this.baseApiUrl + '/api/products/' + id);\n  }\n  updateAvailable(id, plus) {\n    const body = {\n      plus: plus\n    };\n    console.log(id + \" and \" + plus);\n    console.log(this.baseApiUrl + `/api/Products/Available/${id}`);\n    return this.http.put(this.baseApiUrl + `/api/Products/Available/${id}`, body);\n  }\n  // Add product image (admin)\n  PostImage(formData) {\n    const headers = this.getHeadersNoType();\n    return this.http.post(environment.baseApiUrl + '/api/products/Image', formData, {\n      headers: headers,\n      reportProgress: true,\n      observe: 'events'\n    });\n  }\n}\n_class = ProductsService;\n_class.ɵfac = function ProductsService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","environment","ProductsService","constructor","http","baseApiUrl","getHeadersNoType","headers","Authorization","localStorage","getItem","DefaultHeader","GetImage","id","get","responseType","getAllProducts","addProduct","addProductRequest","post","getProduct","updateProduct","updateProductRequest","put","deleteProduct","delete","updateAvailable","plus","body","console","log","PostImage","formData","reportProgress","observe","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\angular\\gym-site\\src\\Service\\products\\products.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { environment } from 'src/Environments/myEnvironments'\nimport { Injectable } from '@angular/core';\nimport { product } from \"../../models/product.model\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n  baseApiUrl: string = environment.baseApiUrl;\n\n  //baseApiUrl: string = 'https://localhost:7122';\n  constructor(private http: HttpClient) { }\n\n  // Gets header and adds the token\n  private getHeadersNoType(): HttpHeaders {\n    const headers = new HttpHeaders({\n      Authorization: 'Bearer ' + localStorage.getItem('jwt'),\n    });\n    return headers;\n  }\n\n  private DefaultHeader(): HttpHeaders {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n    });\n    return headers;\n  }\n\n  public GetImage(id: string) {\n    const headers = this.DefaultHeader();\n    return this.http.get(environment.baseApiUrl + '/api/Products/image/' + id, {\n      headers,\n      responseType: 'blob',\n    });\n  }\n\n\n  getAllProducts(): Observable<product[]> {//return array with all product\n    return this.http.get<product[]>(this.baseApiUrl + '/api/products');\n  }\n  addProduct(addProductRequest: product): Observable<product> {//return ok respons\n    return this.http.post<product>(this.baseApiUrl + '/api/products', addProductRequest);\r\n  }\n\n  getProduct(id: string): Observable<product> {\n    return this.http.get < product>(this.baseApiUrl + '/api/products/' + id);\r\n  }\n\n  updateProduct(id: string, updateProductRequest: product): Observable<product> {//return ok respons\n    return this.http.put<product>(this.baseApiUrl + '/api/products/' + id, updateProductRequest);\r\n  }\n\n  deleteProduct(id: string): Observable<product> {//return ok respons\n    return this.http.delete <product>(this.baseApiUrl + '/api/products/' + id)\r\n  }\n  updateAvailable(id: string, plus: number): Observable<product> {\n    const body = { plus: plus };\n    console.log(id + \" and \" + plus);\n    console.log(this.baseApiUrl + `/api/Products/Available/${id}`);\n    return this.http.put<product>(this.baseApiUrl + `/api/Products/Available/${id}`, body)\r\n  }\n\n\n  // Add product image (admin)\n  public PostImage(formData: FormData): Observable<any> {\n    const headers = this.getHeadersNoType();\n\n    return this.http.post(environment.baseApiUrl + '/api/products/Image', formData, {\n      headers: headers,\n      reportProgress: true,\n      observe: 'events',\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAAqBA,WAAW,QAAoB,sBAAsB;AAE1E,SAASC,WAAW,QAAQ,iCAAiC;;;AAO7D,OAAM,MAAOC,eAAe;EAI1B;EACAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB,KAAAC,UAAU,GAAWJ,WAAW,CAACI,UAAU;EAGH;EAExC;EACQC,gBAAgBA,CAAA;IACtB,MAAMC,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9BQ,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK;KACtD,CAAC;IACF,OAAOH,OAAO;EAChB;EAEQI,aAAaA,CAAA;IACnB,MAAMJ,OAAO,GAAG,IAAIP,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,6BAA6B,EAAE;KAChC,CAAC;IACF,OAAOO,OAAO;EAChB;EAEOK,QAAQA,CAACC,EAAU;IACxB,MAAMN,OAAO,GAAG,IAAI,CAACI,aAAa,EAAE;IACpC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAACb,WAAW,CAACI,UAAU,GAAG,sBAAsB,GAAGQ,EAAE,EAAE;MACzEN,OAAO;MACPQ,YAAY,EAAE;KACf,CAAC;EACJ;EAGAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAY,IAAI,CAACT,UAAU,GAAG,eAAe,CAAC;EACpE;EACAY,UAAUA,CAACC,iBAA0B;IACnC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAU,IAAI,CAACd,UAAU,GAAG,eAAe,EAAEa,iBAAiB,CAAC;EACtF;EAEAE,UAAUA,CAACP,EAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAY,IAAI,CAACT,UAAU,GAAG,gBAAgB,GAAGQ,EAAE,CAAC;EAC1E;EAEAQ,aAAaA,CAACR,EAAU,EAAES,oBAA6B;IACrD,OAAO,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAAU,IAAI,CAAClB,UAAU,GAAG,gBAAgB,GAAGQ,EAAE,EAAES,oBAAoB,CAAC;EAC9F;EAEAE,aAAaA,CAACX,EAAU;IACtB,OAAO,IAAI,CAACT,IAAI,CAACqB,MAAM,CAAW,IAAI,CAACpB,UAAU,GAAG,gBAAgB,GAAGQ,EAAE,CAAC;EAC5E;EACAa,eAAeA,CAACb,EAAU,EAAEc,IAAY;IACtC,MAAMC,IAAI,GAAG;MAAED,IAAI,EAAEA;IAAI,CAAE;IAC3BE,OAAO,CAACC,GAAG,CAACjB,EAAE,GAAG,OAAO,GAAGc,IAAI,CAAC;IAChCE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACzB,UAAU,GAAG,2BAA2BQ,EAAE,EAAE,CAAC;IAC9D,OAAO,IAAI,CAACT,IAAI,CAACmB,GAAG,CAAU,IAAI,CAAClB,UAAU,GAAG,2BAA2BQ,EAAE,EAAE,EAAEe,IAAI,CAAC;EACxF;EAGA;EACOG,SAASA,CAACC,QAAkB;IACjC,MAAMzB,OAAO,GAAG,IAAI,CAACD,gBAAgB,EAAE;IAEvC,OAAO,IAAI,CAACF,IAAI,CAACe,IAAI,CAAClB,WAAW,CAACI,UAAU,GAAG,qBAAqB,EAAE2B,QAAQ,EAAE;MAC9EzB,OAAO,EAAEA,OAAO;MAChB0B,cAAc,EAAE,IAAI;MACpBC,OAAO,EAAE;KACV,CAAC;EACJ;;SAnEWhC,eAAe;;mBAAfA,MAAe,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAfpC,MAAe;EAAAqC,OAAA,EAAfrC,MAAe,CAAAsC,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}