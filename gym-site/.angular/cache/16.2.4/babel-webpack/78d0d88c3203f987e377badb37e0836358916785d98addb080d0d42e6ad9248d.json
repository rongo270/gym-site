{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class JwtInterceptor {\n  intercept(request, next) {\n    // Get the JWT token from client-side storage (localStorage or sessionStorage)\n    const token = localStorage.getItem('jwt_token'); // Change 'jwt_token' to your token key\n    // If a token exists, add it to the request headers\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n_class = JwtInterceptor;\n_class.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["JwtInterceptor","intercept","request","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle","factory","ɵfac"],"sources":["C:\\angular\\gym-site\\src\\Service\\jwt\\jwt-interceptor.service.ts"],"sourcesContent":["// jwt-interceptor.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  intercept(request: HttpRequest<any>, next: HttpHandler) {\n    // Get the JWT token from client-side storage (localStorage or sessionStorage)\n    const token = localStorage.getItem('jwt_token'); // Change 'jwt_token' to your token key\n\n    // If a token exists, add it to the request headers\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n"],"mappings":";;AAKA,OAAM,MAAOA,cAAc;EACzBC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAEjD;IACA,IAAIF,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;;IAGJ,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;SAfWF,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAW,OAAA,EAAdX,MAAc,CAAAY;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}